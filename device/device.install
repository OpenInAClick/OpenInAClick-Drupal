<?php
function _device_installed_fields() {
    $t = get_t();
    return array(
        'device_deviceid' => array(
            'field_name' => 'device_deviceid',
            'label' => $t('id of the spark device'),
            'type' => 'text'
        ),
        'device_accesstoken' => array(
            'field_name' => 'device_accesstoken',
            'label' => $t('Access token of the device'),
            'type' => 'text'
        ),
        'device_delay' => array(
            'field_name' => 'device_delay',
            'label' => $t('Delay time (high to low) of the device'),
            'type' => 'number_integer'
        )
    );
}

// implementation of hook_field_create_instance()
// sets all labels to Hidden for new fields
function device_field_create_instance($instance){
  // fetch the instance info
  $instance_info = field_info_instance(
    $instance['entity_type'],
    $instance['field_name'],
    $instance['bundle']
  );

  // set label in each display to hidden
  foreach( $instance_info['display'] as &$display ){
    $display['label'] = 'hidden';
    $display['format'] = 'hidden';
  }

  // save back to disk
  field_update_instance($instance_info);
}

function _device_installed_instances() {
    $t = get_t();
    return array(
        'device_deviceid' => array(
            'field_name' => 'device_deviceid',
            'type' => 'text',
            'label' => $t('id of the spark device'),
            'widget' => array(
                'type' => 'text_textfield'
            ),
            'display' => array(
                'device_deviceid_list' => array(
                  'label' => 'hidden',
                  'type' => 'text'
                )
            )
        ),
        'device_accesstoken' => array(
            'field_name' => 'device_accesstoken',
            'type' => 'text',
            'label' => $t('Access token of the device'),
            'widget' => array(
                'type' => 'text_textfield'
            ),
            'display' => array(
                'device_accesstoken_list' => array(
                  'label' => 'hidden',
                  'type' => 'text'
                )
            )
        ),
        'device_delay' => array(
          'field_name' => 'device_delay',
          'type' => 'text',
          'label' => $t('Delay time (high to low) of the device'),
          'widget' => array(
              'type' => 'number_integer'
          ),
          'display' => array(
              'device_delay' => array(
                'label' => 'hidden',
                'type' => 'text'
              )
          )
      )
    );
}

function device_uninstall() {
    $ournewtype = 'device';
    $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
    $result = db_query($sql, array(':type' => $ournewtype));
    $nodeids = array();
    foreach ($result as $row) {
        $nodeids[] = $row->nid;
    }
    node_delete_multiple($nodeids);
    delete_custom_fields();
    node_type_delete($ournewtype);
    field_purge_batch(500);
}

function delete_custom_fields() {
    foreach (array_keys(_device_installed_fields()) as $field) {
        field_delete_field($field);
    }
    $instances = field_info_instances('node', 'device');
    foreach ($instances as $instance_name => $fieldinstance) {
        field_delete_instance($fieldinstance);
    }
}

/**
 * Add new field to field data and revision tables.
 */
function device_update_7500(&$sandbox) {
    $myField_name = "device_pin";
    if(!field_info_field($myField_name)) // check if the field already exists.
    {
        $field = array(
            'field_name'    => $myField_name,
            'type'          => 'text',
        );
        field_create_field($field);

        $field_instance = array(
          'field_name' => $myField_name,
          'type' => 'text',
          'label'         => t('Desired pin number for the device (e.g D0, D1 etc)'),
          'widget' => array(
              'type' => 'text_textfield'
          ),
          'display' => array(
              'device_accesstoken_list' => array(
                'label' => 'hidden',
                'type' => 'text'
              )
          )
        );
        field_create_instance($field_instance);
        drupal_set_message("Field created successfully!");
    }
}

function add_custom_fields() {
    foreach (_device_installed_fields() as $field) {
        field_create_field($field);
    }
    foreach (_device_installed_instances() as $fieldinstance) {
        $fieldinstance['entity_type'] = 'node';
        $fieldinstance['bundle'] = 'device';
        print_r($fieldinstance);
        field_create_instance($fieldinstance);
    }
}

/**
 * Implements hook_install().
 */
function device_install() {
    node_types_rebuild();
    $types = node_type_get_types();
    node_add_body_field($types['device']);
    add_custom_fields();
}
